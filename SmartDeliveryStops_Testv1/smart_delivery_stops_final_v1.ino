#include <Keypad.h>

#define IR_SENSOR_RIGHT 13
#define IR_SENSOR_LEFT 11
#define MOTOR_SPEED 180

//Right motor
int enableRightMotor = 6;
int rightMotorPin1 = 2;
int rightMotorPin2 = 3;
//Left motor
int enableLeftMotor = 5;
int leftMotorPin1 = 4;
int leftMotorPin2 = 9;

// Keypad configuration (4√ó4)
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {A3, A2, A1, A0};  // Arduino analog pins
byte colPins[COLS] = {12, 10, 8, 7};     // Digital pins
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

// State vars
enum State { WAIT_FOR_KEY, GO_TO_TABLE, RETURN_HOME };
State state = WAIT_FOR_KEY;
int targetTable = 0;
int nodeCount = 0;

void setup() {
  Serial.begin(9600);

  // PWM frequency tweak for pins 5 & 6
  TCCR0B = TCCR0B & B11111000 | B00000010;

  pinMode(enableRightMotor, OUTPUT);
  pinMode(rightMotorPin1, OUTPUT);
  pinMode(rightMotorPin2, OUTPUT);

  pinMode(enableLeftMotor, OUTPUT);
  pinMode(leftMotorPin1, OUTPUT);
  pinMode(leftMotorPin2, OUTPUT);

  pinMode(IR_SENSOR_RIGHT, INPUT);
  pinMode(IR_SENSOR_LEFT, INPUT);

  rotateMotor(0,0);
  Serial.println("Ready: Press 1-4 to choose table");
}

void loop() {
  char key = keypad.getKey();
  if (state == WAIT_FOR_KEY) {
    if (key >= '1' && key <= '4') {
      targetTable = key - '0';
      nodeCount = 0;
      state = GO_TO_TABLE;
      Serial.print("Table ");
      Serial.print(targetTable);
      Serial.println(" selected. ‡¶ö‡¶≤‡¶õ‡¶ø!");
      delay(500);
    }
  }
  else if (state == GO_TO_TABLE) {
    lineFollowOnce();
    // Detect node: both sensors on black
    if (digitalRead(IR_SENSOR_RIGHT)==HIGH && digitalRead(IR_SENSOR_LEFT)==HIGH) {
      nodeCount++;
      Serial.print("Node #"); Serial.println(nodeCount);
      // ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶ò‡ßÅ‡¶∞‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø ‡¶Ø‡¶æ‡¶§‡ßá ‡¶∏‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡ßá ‡¶Ø‡¶æ‡ßü
      rotateMotor(MOTOR_SPEED, MOTOR_SPEED);
      delay(200);
    }
    if (nodeCount >= targetTable) {
      // ‡¶™‡ßå‡¶Å‡¶õ‡ßá ‡¶ó‡ßá‡¶≤
      rotateMotor(0,0);
      Serial.println("‡¶™‡ßå‡¶Å‡¶õ‡ßá‡¶õ‡¶ø! ‡ß© ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶õ‡¶ø‡•§");
      delay(3000);
      nodeCount = 0;
      state = RETURN_HOME;
      Serial.println("‡¶π‡ßã‡¶Æ‡ßá ‡¶´‡¶ø‡¶∞‡¶õ‡¶ø...");
      delay(500);
    }
  }
  else if (state == RETURN_HOME) {
    // ‡¶ò‡ßÅ‡¶∞‡ßá ‡¶ò‡ßÅ‡¶∞‡ßá ‡¶ò‡¶∞‡ßá ‡¶´‡¶ø‡¶∞‡¶¨‡ßá ‡¶Ø‡¶§‡¶ï‡ßç‡¶∑‡¶£ encounter ‡¶¶‡ßÅ‡¶á‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ï-‡¶¨‡¶ï‡ßç‡¶∏
    lineFollowOnce();
    if (digitalRead(IR_SENSOR_RIGHT)==HIGH && digitalRead(IR_SENSOR_LEFT)==HIGH) {
      nodeCount++;
      Serial.print("Return node #"); Serial.println(nodeCount);
      delay(200);
    }
    if (nodeCount >= 2) {  // ‡¶¶‡ßÅ‡¶á‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ï-‡¶¨‡¶ï‡ßç‡¶∏ ‚Üí ‡¶π‡ßã‡¶Æ
      rotateMotor(0,0);
      Serial.println("‡¶π‡ßã‡¶Æ‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶è‡¶≤‡ßã! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ï‡ßÄ ‡¶ö‡¶æ‡¶™‡¶¨‡ßá? üòÉ");
      state = WAIT_FOR_KEY;
    }
  }
}

// ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶æ‡¶á‡¶® ‡¶´‡¶≤‡ßã‡ßü‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßá‡¶™
void lineFollowOnce() {
  int r = digitalRead(IR_SENSOR_RIGHT);
  int l = digitalRead(IR_SENSOR_LEFT);
  if (r==LOW && l==LOW)           rotateMotor(MOTOR_SPEED, MOTOR_SPEED);
  else if (r==HIGH && l==LOW)     rotateMotor(-MOTOR_SPEED, MOTOR_SPEED);
  else if (r==LOW && l==HIGH)     rotateMotor(MOTOR_SPEED, -MOTOR_SPEED);
  else                             rotateMotor(0,0);
}

// ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶ò‡ßã‡¶∞‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á
void rotateMotor(int rightMotorSpeed, int leftMotorSpeed) {
  if (rightMotorSpeed < 0) {
    digitalWrite(rightMotorPin1,LOW); digitalWrite(rightMotorPin2,HIGH);
  } else if (rightMotorSpeed > 0) {
    digitalWrite(rightMotorPin1,HIGH); digitalWrite(rightMotorPin2,LOW);
  } else {
    digitalWrite(rightMotorPin1,LOW); digitalWrite(rightMotorPin2,LOW);
  }
  if (leftMotorSpeed < 0) {
    digitalWrite(leftMotorPin1,LOW); digitalWrite(leftMotorPin2,HIGH);
  } else if (leftMotorSpeed > 0) {
    digitalWrite(leftMotorPin1,HIGH); digitalWrite(leftMotorPin2,LOW);
  } else {
    digitalWrite(leftMotorPin1,LOW); digitalWrite(leftMotorPin2,LOW);
  }
  analogWrite(enableRightMotor, abs(rightMotorSpeed));
  analogWrite(enableLeftMotor, abs(leftMotorSpeed));
}
